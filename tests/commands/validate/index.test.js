import { describe, test, expect } from 'vitest';import { execSync } from 'child_process';import fs from 'fs';import path from 'path';import { cleanup, writeIndex, createDummyFile, TEMP_FILES_DIR } from '../../test-utils.js';describe('llm-cli validate', () => {  test('reports success for valid index', () => {    cleanup();    const dummyFilePath = createDummyFile('valid-cmd.js');    writeIndex(false, [{ name: 'cmd', url: dummyFilePath, description: 'A test command', tags: [], llmHelpSource: '--llm', dev: false, global: false }]);    const out = execSync('node src/index.js validate', { encoding: 'utf8' });    expect(out).toContain('Index is valid.');  });  test('fails for missing file', () => {    cleanup();    const nonExistentPath = `file://${path.resolve(TEMP_FILES_DIR, 'non-existent-file.js').replace(/\\/g, '/')}`;    writeIndex(false, [{ name: 'bad', url: nonExistentPath, description: 'Missing file', tags: [], llmHelpSource: '--llm', dev: false, global: false }]);    try {      execSync('node src/index.js validate', { stdio: 'pipe' });    } catch (e) {      expect(e.stderr.toString()).toContain(`Error: Binary not found for command 'bad' at ${nonExistentPath.replace(/^file:\/\//, '')}`);    }  });});